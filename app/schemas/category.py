import uuid
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field

# --- Base Schema for shared attributes ---
# This schema includes all fields that are not automatically generated by the database
class CategoryBase(BaseModel):
    """
    Base schema for Category, containing common attributes for creation and update.
    """
    name: str = Field(..., max_length=100, description="The name of the category.")
    slug: str = Field(..., max_length=100, description="A unique, URL-friendly slug for the category.")
    description: Optional[str] = Field(None, description="A detailed description of the category.")
    icon: Optional[str] = Field(None, max_length=500, description="URL or name of the category icon.")
    is_active: bool = Field(True, description="Whether the category is active and visible.")


# --- Schema for creating a new Category ---
class CategoryCreate(CategoryBase):
    """
    Schema for input when creating a new Category.
    Inherits CategoryBase.
    """
    # No extra fields are needed here, as 'is_active' has a default.
    pass


# --- Schema for updating an existing Category ---
class CategoryUpdate(BaseModel):
    """
    Schema for input when updating an existing Category.
    All fields are optional for partial updates (PATCH requests).
    """
    name: Optional[str] = Field(None, max_length=100, description="The name of the category.")
    slug: Optional[str] = Field(None, max_length=100, description="A unique, URL-friendly slug for the category.")
    description: Optional[str] = Field(None, description="A detailed description of the category.")
    icon: Optional[str] = Field(None, max_length=500, description="URL or name of the category icon.")
    is_active: Optional[bool] = Field(None, description="Whether the category is active and visible.")


# --- Schema for data retrieved from the database ---
class CategoryInDBBase(CategoryBase):
    """
    Schema for database-backed Category instances, including ORM-generated fields.
    """
    id: uuid.UUID
    created_at: datetime
    updated_at: datetime

    # Pydantic configuration for ORM mode (allows Pydantic to read ORM/SQLAlchemy models)
    class Config:
        # Pydantic V2 equivalent of `orm_mode = True`
        from_attributes = True


# --- Main response schema for API output ---
class CategoryResponse(CategoryInDBBase):
    """
    The full schema used for returning Category data in API responses.
    """
    # If you needed to include the 'properties' relationship,
    # you would import its schema (e.g., List[PropertySchema]) and add it here.
    # properties: List['PropertySchema'] = []
    pass

# # Optional: Forward reference resolution if you include nested schemas (like 'properties')
# # from . import property as property_schema
# # Category.model_rebuild()```
